1. 滚动加载图片 & do anything else
  原理：元素距离屏幕顶部的高度，小于视窗高度，则判断处于视窗内，显示状态。

  var imgs = document.querySelectorAll('img');
  function isVisible(el) {
    var bound = el.getBoundingClientRect();
    var clientHeight = window.innerHeight;
    return bound.top <= clientHeight;
  }
  function lazyLoad(imgs) {
    for (var i = 0; i < imgs.length; i++) {
      var cur = imgs[i];
      isVisible(cur) && !imgs[i].src && (imgs[i].src = imgs[i].getAttribute('data-src'));
    }
  }
  // 执行一次，在当前滚动位置
  lazyLoad(imgs);
  window.onscroll = function () { 
    lazyLoad(imgs);
  }

2. 模态框展开过渡动画
  @keyframes modalBounceEnter {
    0% {
      opacity: 0;
      transform: scale3d(0.3, 0.3, 0.3);
    }

    20% {
      transform: scale3d(1.1, 1.1, 1.1);
    }

    40% {
      transform: scale3d(1, 1, 1);
    }

    60% {
      opacity: 1;
      transform: scale3d(1.03, 1.03, 1.03);
    }

    100% {
      opacity: 1;
      transform: scale3d(1, 1, 1);
    }
  }

3. 使用content-visibility和content-intrinsic-size控制离屏内容的渲染与否
  content-visibility: visible/hidden/auto;
  content-intrinsic-size: 0 500px; // 控制设置了content-visibility属性的元素未加载时的初始高宽度，不设置浏览器默认为0
  
4. 在持续高频执行动画的元素的父元素上添加will-change属性，作为最后的性能优化手段。建议在完成所有动画后，将元素的will-change删除。
  在样式表中少用will-change
  给will-change足够的时间令其发挥该有的作用
  使用<custom-ident>来针对超特定的变化（如，left, opacity等）
  如果需要的话，可以JavaScript中使用它（添加和删除）
  修改完成后，删除will-change
  不要同时声明太多的属性
  不要应用在太多元素上
  不要把资源浪费在已停止变化的元素上