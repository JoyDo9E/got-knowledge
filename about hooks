相关引入：
        import React, { useState, useEffect } from 'react';
        const [count, setCount] = useState(0);
        useEffect(() => {
            // 使用浏览器的 API 更新页面标题
            document.title = `You clicked ${count} times`;
        });
        useEffect(() => {
            ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);
            // return返回的函数，会在componentWillUnmount生命周期时执行，用以清除相关绑定的事件等...
            return () => {
              ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);
            };
        });
    1).Hook 使你在非 class 的情况下可以使用更多的 React 特性(类式组件和函数式组件，在函数式组件中使用更多的如state， 生命周期等等？);
    2).再不编写class的情况下使用state或者其他react特性，使用 Hook 从组件中提取状态逻辑，使得这些逻辑可以单独测试并复用;
    3).Hook 使你在无需修改组件结构的情况下复用状态逻辑。 这使得在组件间或社区内共享 Hook 变得更便捷;
    4).Hook在class内部是不起作用的。但你可以使用它们来取代class;
    5).使用hook的timing：在编写函数组件并意识到需要向其添加一些 state，以前的做法是必须将其它转化为 class。现在你可以在现有的函数组件中使用 Hook。
    6).useState 是一种新方法，它与 class 里面的 this.state 提供的功能完全相同(初始化state相关值)。
        const [count, setCount] = useState(0); 意为初始化一个名为count的，值为0的state以及改变count的方法setCount，如需改变count的值  只需setCount(5)即可将count的值设为5；
        如需初始化多个值（state），多执行几次即可；useState的值可以为任意类型
    7).useEffect就是一个Effect Hook，给函数组件增加了操作副作用的能力。它跟class组件中的 componentDidMount、componentDidUpdate 和 componentWillUnmount具有相同的用途，只不过被合并成了一个API。
    8).由于副作用函数是在组件内声明的，所以它们可以访问到组件的 props 和 state。默认情况下，React 会在每次渲染后调用副作用函数 —— 包括第一次渲染的时候。
    9).只能在函数最外层调用 Hook。不要在循环、条件判断或者子函数中调用;
    10).只能在 React 的  函数组件 和  自定义的 Hook   中调用 Hook。不要在其他 JavaScript 函数中调用。
    11).Hook 是一种复用状态逻辑的方式，它不复用 state 本身。事实上 Hook 的每次调用都有一个完全独立的 state —— 因此你可以在单个组件中多次调用同一个自定义 Hook。(复用逻辑)
        import React, { useState, useEffect } from 'react';
        function useFriendStatus(friendID) {
          const [isOnline, setIsOnline] = useState(null);
          function handleStatusChange(status) {
            setIsOnline(status.isOnline);
          }
          useEffect(() => {
            ChatAPI.subscribeToFriendStatus(friendID, handleStatusChange);
            return () => {
              ChatAPI.unsubscribeFromFriendStatus(friendID, handleStatusChange);
            };
          });
          return isOnline;
        }
    12).高阶组件（HOC）是 React 中用于复用组件逻辑的一种高级技巧。高阶组件是参数为组件，返回值为新组件的函数。
    13).useMemo(fn, [依赖的state]);由于函数式组件无法通过shouldComponentUpdate精确控制渲染行为,故使用useMemo来控制，只有当依赖的state值改变时，才会出发fn函数的执行
    14).useCallback传入一个内联回调和一个输入数组，返回一个带有记忆的函数，只有输入数组中其中一个值变化才会更改。useCallback(fn, inputs) 等价于 useMemo(() => fn, inputs)。
    15).useMemo/useCallback在组件初始化时就会执行，而useEffect在render()之后才会执行，如果其依赖为'[]'，则表示只会执行一次。
