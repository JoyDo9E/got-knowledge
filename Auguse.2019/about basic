1.设置png等格式的图片作为元素背景时， 注意一下，如果设置为：
        background: url("...") no-repeat center / cover(contain)
    那么该图片会被等比例的放大缩小，且其宽高比极可能于元素宽高比不符，会出现图片边缘被覆盖，宽、高只能满足其一的情况；解决方式为：放大图片，变center为top/bottom;
2.cross-env: 运行跨平台设置和使用环境变量的脚本; 详细见 https://www.npmjs.com/package/cross-env
3.可以用以下的方式，将build的文件以托管静态文件的方式，在浏览器中渲染出来，以检测是否存在build问题
    yarn global add serve
    serve -s dist（build后的文件夹）
4.洗牌算法：
    （1）.高纳德算法，满足每张牌出现在每个位置的概率相同即可； 5张牌5个位置，第一张：1/5；第二张：4/5*（1/4）
    （2）.模拟从牌堆里面随机（*）不放回的取牌即可实现（malloc） 随机产生index，该位置无牌则顺位后移（前移）取牌，牌组长度不变；产生的index随机数随牌组的长度变化而变化，每取一张牌，牌组长度-1
5.git相关：
    上传本地创建项目：
        git remote add origin <仓库地址>
        git push -u origin master
6.链式递加函数：
    满足：
        add(1); // 1
        add(1)(2)(3)(4); // 10
        var addTwo = add(2);
        addTwo; // 2
        addTwo + 5; // 7
    函数为：
        var add = function(n) {
          const f = x => add(n + x)
          f.valueOf = () => n
          return f;
        }
7.页面上元素的曲线运动，只是给了该元素一个随机的x方向和y方向的速度，同时使其下落速度逐渐增大（模拟重力下坠），从而形成了曲线的抛物运动；
8.DNS：域名系统（Domain Name System缩写DNS，Domain Name被译为域名）是因特网的一项核心服务，它作为可以将域名和IP地址相互映射的一个分布式数据库，能够使人更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。DNS本地缓存则为host文件，远端DNS服务器则为分布式服务器。
9.PAC模式（proxy auto config）根据请求地址动态的设置代理地址  pac文件编辑方式：https://www.cnblogs.com/milton/p/6263596.html && http://findproxyforurl.com/pac-functions/
10.网络协议示意图：https://upload-images.jianshu.io/upload_images/11362584-157a39882f263361.png?imageMogr2/auto-orient/strip|imageView2/2/w/612/format/webp
11.https协议的工作流程：https://www.cnblogs.com/anyehome/p/8858456.html
12.for...in和for...of的区别（可迭代类数组对象，且自动不遍历非自身属性，除原型属性，继承属性之外的属性）：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of
    for...in遍历的是类数组对象/对象的key值；而for...of遍历的是value
13.通过修改react-scripts来自定义create-react-app的模板; // https://www.sheng00.com/2728.html
14.css模块化：
    {
        test: /^.(sass|less|css|scss)$/,
        use: [
            'style-loader',
            {
                loader: 'css-loader',
                options: {
                    modules: true
                }
            },
            ['sass-loader', 'less-loader']
        ]
    }
15.所有的计算都可随数字的大小变化而变化，如8位二进制数无法表示，超过八位，表示为16位二进制数，1byte递增；
    计算机不做减法 只做加法
    原码：数的二进制（正数不变，负数的第一位为符号为1，如：-8， 10001000）；反码：正数不变；负数符号位不变，其他位按位取反；补码：正数不变；负数在反码的基础上加1
    如： -300 - 400
        -300，原：1000000100101100；反：1111111011010011；补：1111111011010100
        -400，原：1000000110010000；反：1111111001101111；补：1111111001110000
        结果：11111110101000100（17位，多余16位，去除第一位，1111110101000100）
16.antd骨架加载样式:
    animation: ant-skeleton-loading 1.4s ease infinite;
    background: linear-gradient(90deg, #f2f2f2 25%, #e6e6e6 37%, #f2f2f2 63%);
    background-size: 400% 100%;
    @keyframes ant-skeleton-loading{
        0% {
                background-position: 100% 50%;
            }
        100% {
            background-position: 0 50%;
        }
    }
17.箭头函数有几个使用注意点。
   函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。
   不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。
   不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。
   不可以使用yield命令，因此箭头函数不能用作 Generator 函数。
   上面四点中，第一点尤其值得注意。this对象的指向是可变的，但是在箭头函数中，它是固定的。

   箭头函数的 this 永远指向其上下文的 this ，任何方法都改变不了其指向，如 call() , bind() , apply()
   普通函数的this指向调用它的那个对象
18.react组件内部是屏蔽全局变量的。引用全局变量需要window;如引入wxsdk时，需要使用window.wx.[api]，否则会报错wx is not defined；
19.实际上，JSX 仅仅只是 React.createElement(component, props, ...children) 函数的语法糖。如下 JSX 代码：
   <MyButton color="blue" shadowSize={2}>
     Click Me
   </MyButton>

   会编译为：

   React.createElement(
     MyButton,
     {color: 'blue', shadowSize: 2},
     'Click Me'
   )
20.定义/修改对象的属性或者方法时，可以用：
    Object.defineProperty(object: object, key: string, attributes: {enumerable: boolean, writable: boolean, configurable: boolean, value: any，(引用类型无value和wraitable属性，有set和get)})
    Object.defineProperties(obj: Object, props)
当使用字面向量法定义一个对象的某个属性的setter和getter属性时，可以简写为：
    var Example = {
        name: 'pt',
        age: undefined,
        get age () {
            return 16;
        },
        set age(age) {
            this.age = age
        }
    }
21.react中，多层传递props时（层层传递，只有最底层的组件使用改props的数据时），
    可考虑在最顶层组件处，定义一个上下文React.createContext：
        // Context lets us pass a value deep into the component tree
        // without explicitly threading it through every component.
        // Create a context for the current theme (with "light" as the default).
        const ThemeContext = React.createContext('light');

        class App extends React.Component {
          render() {
            // Use a Provider to pass the current theme to the tree below.
            // Any component can read it, no matter how deep it is.
            // In this example, we're passing "dark" as the current value.
            return (
              <ThemeContext.Provider value="dark">
                <Toolbar />
              </ThemeContext.Provider>
            );
          }
        }
    再在最底层组件处使用：
        class ThemedButton extends React.Component {
          // Assign a contextType to read the current theme context.
          // React will find the closest theme Provider above and use its value.
          // In this example, the current theme is "dark".
          static contextType = ThemeContext;
          render() {
            return <Button theme={this.context} />;
          }
        }

    综上：
    const ThemeContext = React.createContext('light');
    <ThemeContext.Provider value={theme}></ ThemeContext.Provider>  发布者  传入数据undefined
    <ThemeContext.Consumer>{theme => <Component />}</ ThemeContext.Provider>  订阅者  读取数据

22.可选链操作符（规避调用者为nullish的情况下的异常）(如调用者为nullish，返回undefined)：
    (null || undefined)?.[property]
    也可用于验证函数是否存在之后的调用：
    fn?.(arguments)

   空值合并运算符（左侧为nullish的值时，返回右侧的值）
    (null || undefined) ?? value
    与逻辑或的区别在于，逻辑或会隐式转换左侧的部分，如果左侧为（0, "", undefined, null, NaN）时，均会被转化为false，返回右侧的值；
    而空值运算符只要左侧不为undefined或null，均返回左侧的值

   逻辑空赋值运算符（左侧值为nullish时，把右侧值赋给左侧）
    (null || undefined) ??= value

23.Boolean相当于是个函数：Boolean(0); // false
  Essentially, writing:
    arr.filter(Boolean)
  is the same as writing:
    arr.filter( function(x) { return Boolean(x); }); 
  
24.React.useCallback与lodash.throttle联用时，会提示“React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead  react-hooks/exhaustive-deps”
需要改变写法：
  React.useCallback(throttle(..., 1000), [*]) ===>>> React.useMemo(() => throttle(..., 1000), [*])

25.使用react-router-dom进行跨路由跳转时（如：从/one/onesub跳转/three/threesub时），出现url变化，但是页面渲染异常的问题，解决办法：系多次使用BrowserRouter或者
HashRouter的结果（如：遍历子路由或孙路由时，再次嵌套路由组件）；去掉多层嵌套，防止路由信息丢失。


26.React.portals使用场景：某一组件，在React组件树中属于一组件的子组件（方便状态管理），但在真实Dom上属于另一元素的子元素（方便层级和展示管理）
  // React 并*没有*创建一个新的 div。它只是把子元素渲染到 `domNode` 中。
  // `domNode` 是一个可以在任何位置的有效 DOM 节点。
  ReactDOM.createPortal(this.props.children, domNode);

27.Typescript 3.0新增unknown类型，
  任何类型都可赋值给unknown类型（即 const a: unknown = b: (number, string, boolean...)）;
  但unknown类型只能赋值给any & unknown类型的参数（即 const a: (unknown & any) = b: unknown）;
  主要用于解决  防止声明any类型的参数失去类型检查，同时可赋值任何类型 的情况：
    对 unknown 类型执行方法调用或者属性读取之类的操作，都必须先使用条件控制流或者类型断言来收窄 unknown 到指定的类型：
    // any 类型
    const doSomething = (val: any) => {
      // 没有断言，都不报错
      val();  
      val.foo.bar; 
    }

    const doSomething = (val: unknown) => {
      if (typeof val === 'function') {
        val(); // 条件分析，类型收窄到 Function，调用不报错；
      }
      // 没有断言，报错
      val.foo.bar;
      x[0];
      x();
    }

28. typescript中，数组类型，enum（枚举）类型，Tuple（元组）类型的区别：
  数组类型：number[] | Array<number> 以及 Tuple类型：a: [number, string, boolean] 都是针对数组数据进行类型声明 [备注：js弱类型语言数组中可存入任何类型的元素，元组用以声明固定位置固定类型]
  enum类型是对对象进行类型声明(并非类型声明，而是类型声明 + 赋值，可直接输出为一对象) enum x: {Up, Down, Left, Right}, 且带有自增性，即当前声明：x.Up // 0， x.Down // 1

29."在 React 应用中，当某个组件的状态发生变化时，它会以该组件为根，重新渲染整个组件子树"

30.document.visibilityState可用于判断页面状态(>=IE 10)；"hidden" | "visibile" | "prerender"(渲染中)

31. 在React中，如果是由React引发的事件处理（比如通过onClick引发的事件处理），调用setState不会同步更新this.state，除此之外的setState调用会同步执行this.state 。所谓“除此之外”，指的是绕过React通过addEventListener直接添加的事件处理函数，还有通过setTimeout/setInterval产生的异步调用。
原因： 在React的setState函数实现中，会根据一个变量isBatchingUpdates判断是直接更新this.state还是放到队列中回头再说，而isBatchingUpdates默认是false，也就表示setState会同步更新this.state，但是，有一个函数batchedUpdates，这个函数会把isBatchingUpdates修改为true，而当React在调用事件处理函数之前就会调用这个batchedUpdates，造成的后果，就是由React控制的事件处理过程setState不会同步更新this.state。
注意： setState的“异步”并不是说内部由异步代码实现，其实本身执行的过程和代码都是同步的，只是合成事件和钩子函数的调用顺序在更新之前，导致在合成事件和钩子函数中没法立马拿到更新后的值，形式了所谓的“异步”，当然可以通过第二个参数 setState(partialState, callback) 中的callback拿到更新后的结果。
详细请看 深入 setState 机制(https://github.com/sisterAn/blog/issues/26)

32.使用queueMicrotask可创建一个微任务：
    queueMicrotask(() => {//...微任务函数体})
  微任务不在其所处的函数退出时，而是在主程序退出时被执行：
    let callback = () => log("Regular timeout callback has run");
    let urgentCallback = () => log("*** Oh noes! An urgent callback has run!");
    let doWork = () => {
      let result = 1;
      queueMicrotask(urgentCallback);
      for (let i=2; i<=10; i++) {
        result *= i;
      }
      return result;
    };
    log("Main program started");
    setTimeout(callback, 0);
    log(`10! equals ${doWork()}`);
    log("Main program exiting");
    输出：
      Main program started
      10! equals 3628800
      Main program exiting
      *** Oh noes! An urgent callback has run!
      Regular timeout callback has run

33.项目中声明了alia，ts仍然报错：找不到模块“**”或其相应的类型声明。
解决：  在tsconfig.json中声明paths属性（模块名到基于 baseUrl的路径映射的列表。查看 模块解析文档了解详情。）https://www.tslang.cn/docs/handbook/compiler-options.html
        向typescript编译器解释alia，防止报错。
        如：paths: { '@': ['src'] }

34.Dom Diff图解：https://github.com/ascoders/weekly/blob/master/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF/190.%E7%B2%BE%E8%AF%BB%E3%80%8ADOM%20diff%20%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3%E3%80%8B.md

35.vue中可通过provide & inject跨层级传递 & 接收数据
  祖先组件： provide: { message: 'data' }
  后代组件： inject: ['message']

36. display: table;(父元素) & display: table-cell(子元素) 可适用于多行文本（多行行内元素）垂直居中的问题。