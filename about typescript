1.typescript引入模块，区分于社区标准 require()和ES6语法import :
    import foo = require("foo");
    foo.doStuff();
2.导出模块方式，区分于社区标准：module.exports = exports
    export function fn() {}    或
    const obj = {};
    export = obj
// export function myFn (f: (x: number) => void, nums: number[]): void;
// export function myFn (f:(x: number) => void, ...nums: number[]): void; // 使用剩余参数（ ...nums）来表示之后的其它所有参数必须是number类型
3.定义对象：
    1).对象字面量法
        let options = {
            color: "red",
            volume: 11
        };
    2).定义对象类型和类型断言到对象字面量上：
        interface Object {name: string, age: number}
        let obj = {} as Object;
        obj.name = 'pt'
        obj.age = 23
      类型断言还有另一种写法：
        const a = {} as ParamsObj  <===> const a = <ParamsObj>{}
4.在某些情况下TypeScript没法确定某些值的类型。 那么TypeScript会使用 any类型代替。
5.默认地，TypeScript把null和undefined当做属于任何类型。可以使用联合类型。 比如，某值可能为 number或null，你可以声明它的类型为number|null
6.假设有一个值TypeScript认为可以为null或undefined，但是你更清楚它的类型，你可以使用!后缀。
  declare var foo: string[] | null;
  foo.length;  // error - 'foo' is possibly 'null'
  foo!.length; // okay - 'foo!' just has type 'string[]' // 等价于  !!foo && foo.length ？？？
7.keyof {name: string, age: number} // string | number   返回一个联合类型
8.优雅的在react框架下使用typescript：
    1).使用组件声明时的Component<P, S>泛型参数声明，来代替PropTypes(传入props类型校验)；
    2).全局变量或者自定义的window对象属性，统一在项目根下的global.d.ts中进行声明定义;
    3).所有用到jsx语法的文件都需要以tsx后缀命名;
    4).对于项目中常用到的接口数据对象，在types/目录下定义好其结构化类型声明;
    5).组件声明：
        类组件声明：
        class App extends Component<IProps, IState> {
            static defaultProps = {
                // ...
            }
            readonly state = {
                // ...
            };
            // 小技巧：如果state很复杂不想一个个都初始化，可以结合类型断言初始化state为空对象或者只包含少数必须的值的对象：  readonly state = {} as IState;
            // 需要特别强调的是，如果用到了state，除了在声明组件时通过泛型参数传递其state结构，还需要在初始化state时声明为 readonly；
            // 这是因为我们使用 class properties 语法对state做初始化时，会覆盖掉Component<P, S>中对state的readonly标识。
            // 只要在组件内部使用了props和state，就需要在声明组件时指明其类型。
            //
        }

        函数式组件声明：
        const List: React.FC<IProps> = props => null



9.接口继承：
    interface Shape {
        color: string;
    }
    interface PenStroke {
        penWidth: number;
    }
    // todo 继承单个接口
    interface Square extends Shape {
        sideLength: number;
    }
    // todo 一个接口可以继承多个接口
    interface Square extends Shape, PenStroke {
        sideLength: number;
    }
    涉及到“方法”的接口类型继承，需要重写“方法”才能实现的，用implements继承：
        interface ClockInterface {
            currentTime: Date;
            setTime(d: Date);
        }
        class Clock implements ClockInterface {
            currentTime: Date;
            // todo 重写了settime方法
            setTime(d: Date) {
                this.currentTime = d;
            }
            constructor(h: number, m: number) { }
        }
    
    《一个类只能继承另一个类而不能实现多继承》，
      故当需要继承来自多个类的多个方法时，可以把这些方法提出来，结合implements实现接口，再继承，如：
      人和机器人都能做饭，洗衣
      interface AbleToDo {
        // name: string;
        cook(): void;
        wash(): void;
      }

      interface Else {
        watch(): void
      }

      class Person implements AbleToDo {
        readOnly name = 'person'
        cook () {
          console.log('person cool');
        }
        wash () {
          console.log('person wash');
        }
      }

      // implements可以实现多继承
      class Robot implements AbleToDo, Else {
        private name = 'robot'
        cook () {
          console.log('robot cool');
        }
        wash () {
          console.log('robot wash');
        }
        watch () {
          console.log('robot watch');
        }
      }

      private 修饰符指定的属性或方法只能在本类中使用，即Robot.name，不能继承或在其他地方使用；
      public 修饰符的属性或者方法是公用的在任何地方都能使用
      protected 修饰符的属性或者方法只能在本类或者子类中使用
      static 修饰符修饰的方法或属性为类方法、类属性；父类与子类共有，只能用过类调用，不能通过实例调用

    写一个类的时候，不希望直接使用该类创建实例（即不能被new），可以创建抽象类使其不能被实例化
    abstract class Robot {
      constructor(name: string) {
        this.name = name;
      }
      protected name: string;
      abstract sayName(): void;
    }

    class Alpha extends Robot {
      // 继承抽象类的构造器
      constructor (name: string) {
        super(name);
        this.name = name;
      }
      // 继承抽象类的方法
      sayName () {
        console.log(this.name);
      }
    }

    const sub = new Alpha('alpha');
    sub.sayName()

    传入类型与返沪类型相同，则可使用泛型:
      function confResolve<T>(params: T): T {
        return {...params, name: 'abc'};
      }
      const newConf = confResolve({
        name: '13',
        age: 18
      });
      console.log(newConf);

    可以通过继承接口来限制泛型：
      interface ConfResolveParams {
        name: string;
        age: number;
      }

      function confResolve<T extends ConfResolveParams>(params: T): T {
        return {...params, name: 'abc'};
      }
      const newConf = confResolve({
        name: '13',
        age: 18
      });
      console.log(newConf);    

    同理，也可在类和接口中使用泛型
    interface Params<T>{
      errno: number;
      data: T;
      t: number
    }
    class Person<T>{
      constructor(info: T){
        this.personalInfo = info;
      }
    }





10.函数传参：
    // 在TypeScript里我们可以在参数名旁使用 ?实现可选参数的功能
        function buildName(firstName: string, lastName?: string) {
            ...
        }
    // 在TypeScript里，你可以把所有参数收集到一个变量里 todo  多态
    function buildName(firstName: string, ...restOfName: string[]) {
      return firstName + " " + restOfName.join(" ");
    }
11.type和interface的区别，详情见 https://juejin.im/post/5c2723635188252d1d34dc7d
12.声明需要调用this的函数的参数类型时，需要在传入参数中显式地声明this的类型：
    interface Card {
        suit: string;
        card: number;
    }
    interface Deck {
        suits: string[];
        cards: number[];
        createCardPicker(this: Deck): () => Card;
    }
    如果this在回调函数中（未使用this指针的情况下），可声明this: void
13.常识：（文件类型相关）
    .js === .ts   .jsx === .tsx
    .ts是原来的js文件，.d.ts是声明文件

14.相关的react type声明以及其区别：
    使用typeof获取对象实例或者值得类型~
    // TODO React.Node
    React.Node：
        can be null, a boolean, a number, a string, a React element, or an array of any of those types recursively.声明类型诸如div span label等等标签；
        大致与React.ChildrenArray<T>类似：React.Node === React.ChildrenArray<void | null | boolean | string | number | React.Element<any>>;
    // TODO React.Element & React.Element<typeof Component>
    React.Element:
        the type for the value of a JSX element, React.Element<typeof Component> is also the return type of React.createElement()
        const element: React.Element<'div'> = <div />; 用于声明JSX 标签
    // TODO React.ChildrenArray<T>
    React.ChildrenArray<T>:
        A React children array can be a single value or an array nested to any level 结合React.Children使用，用于声明react的children的类型
        const children: React.ChildrenArray<number> = 42; || const children: React.ChildrenArray<number> = [[1, 2], 3, [4, 5]];
    // TODO React.AbstractComponent<Config, Instance>
    React.AbstractComponent<Config, Instance>:
        most useful for writing HOCs and library definitions,用于声明HOC组件常用；
    // TODO React.ComponentType<Props>
    React.ComponentType<Props>:
        a union of a class component or a stateless functional component.(一个类组件和无状态组件的联合类型)，适用于声明receive or return React components或者HOC

15.extends和implements的区别：
    In your example you treat your Person class once as a class when you extend it and once as an interface when you implement it.
    Your code:
    // todo Your code:
    class Person {
        name: string;
        age: number;
    }
    class Child  extends Person {}
    class Man implements Person {}
    // todo error notice
    Has a compilation error saying:

    Class 'Man' incorrectly implements interface 'Person'.
    Property 'name' is missing in type 'Man'.

    And that's because interfaces lack implementation.
    So if you implement a class then you only take its "contract" without the implementation, so you'll need to do this:
    // todo correct mistake
    class NoErrorMan implements Person {
        name: string;
        age: number;
    }
    综上（you treat your Person class once as a class when you extend it and once as an interface when you implement it）：
        extends用于声明一个对象（Object类）时的类型继承，无需实现；
        implements用于声明一个类（class类）时的类型继承，需要实现内部的属性和方法。

16.typescript官方api实现：

    type Partial<T> = {
      [P in keyof T]?: T[P]
    }

    type Require<T> = {
      [P in keyof T]-?: T[P]
    }

    type Pick<T, K extends keyof T> = {
      [P in K]: T[P]
    }

    /** 不清楚是怎样从T中去除了U中的部分的？-- 泛型原因 */
    /** T和U均为联合类型的情况 */
    type Exclude<T, U> = T extends U ? never : T;

    /** 从T中提取为U的类型 */
    type Extract<T, U> = T extends U ? T : U;

    /** 直接执行Omit逻辑行不通；只能“在T中选出【选择T中除U之外的key】” */
    type Omit<T, U> = Pick<T, Include<keyof T, U>>

    type ReadOnly<T> {
      readonly [K in keyof T]: T[K]
    }

    /** 表示传入的泛型T是任何类型的key，再赋值类型U */
    type Record<T extends keyof any, U> = {
      [K in T]: U
    }

    /** 返回函数的参数组成的元组 */
    type Parameters<T extends (...args: any[]) => any> = T extends (...args: infer P) => any ? P : never;

    /** 返回函数返回数据的类型 */
    /** 泛型继承于函数，通过infer作为形参获取函数返回数据的类型 */
    type ReturnType = <T extends (...args: any) => any> = T extends (...args: any) => infer P ? P : never;

    /** T['length']可以获取泛型的长度 */
    /** 获取元组 | 数组长度 */
    type Length<T extends Array<any>> = T['length']

    /** T[number]表示遍历数组（元组） */
    /** 判断元组中是否包含某一元素 */
    type IsInclude<T extends Array<any>, U> = {
      [K in T[number]]: true;
    }[U] extends true ? true : false

