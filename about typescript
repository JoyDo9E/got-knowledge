1.typescript引入模块，区分于社区标准 require()和ES6语法import :
    import foo = require("foo");
    foo.doStuff();
2.导出模块方式，区分于社区标准：module.exports = exports
    export function fn() {}    或
    const obj = {};
    export = obj
// export function myFn (f: (x: number) => void, nums: number[]): void;
// export function myFn (f:(x: number) => void, ...nums: number[]): void; // 使用剩余参数（ ...nums）来表示之后的其它所有参数必须是number类型
3.定义对象：
    1).对象字面量法
        let options = {
            color: "red",
            volume: 11
        };
    2).定义对象类型和类型断言到对象字面量上：
        interface Object {name: string, age: number}
        let obj = {} as Object;
        obj.name = 'pt'
        obj.age = 23
4.在某些情况下TypeScript没法确定某些值的类型。 那么TypeScript会使用 any类型代替。
5.默认地，TypeScript把null和undefined当做属于任何类型。可以使用联合类型。 比如，某值可能为 number或null，你可以声明它的类型为number|null
6.假设有一个值TypeScript认为可以为null或undefined，但是你更清楚它的类型，你可以使用!后缀。
  declare var foo: string[] | null;
  foo.length;  // error - 'foo' is possibly 'null'
  foo!.length; // okay - 'foo!' just has type 'string[]' // 等价于  !!foo && foo.length ？？？
7.keyof {name: string, age: number} // string | number   返回一个联合类型
8.优雅的在react框架下使用typescript：
    1).使用组件声明时的Component<P, S>泛型参数声明，来代替PropTypes(传入props类型校验)；
    2).全局变量或者自定义的window对象属性，统一在项目根下的global.d.ts中进行声明定义;
    3).所有用到jsx语法的文件都需要以tsx后缀命名;
    4).对于项目中常用到的接口数据对象，在types/目录下定义好其结构化类型声明;
    5).组件声明：
        类组件声明：
        class App extends Component<IProps, IState> {
            static defaultProps = {
                // ...
            }
            readonly state = {
                // ...
            };
            // 小技巧：如果state很复杂不想一个个都初始化，可以结合类型断言初始化state为空对象或者只包含少数必须的值的对象：  readonly state = {} as IState;
            // 需要特别强调的是，如果用到了state，除了在声明组件时通过泛型参数传递其state结构，还需要在初始化state时声明为 readonly；
            // 这是因为我们使用 class properties 语法对state做初始化时，会覆盖掉Component<P, S>中对state的readonly标识。
            // 只要在组件内部使用了props和state，就需要在声明组件时指明其类型。
            //
        }

        函数式组件声明：
        const List: React.FC<IProps> = props => null
